{"meta":{"title":"小小白杨","subtitle":"I'm a fatal bug!","description":"图样图森破(too young too simple,sometimes naive)","author":"baiyangliu","url":"https://baiyangliu.github.io"},"pages":[{"title":"关于","date":"2016-12-15T10:39:42.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"about.html","permalink":"https://baiyangliu.github.io/about.html","excerpt":"","text":"姓甚名甚字甚，湖北随州人氏。民国九十六年于随州二中举试，不中，次年又试，中举。四年大学，逃课者十之八九，闭于寝自修。后自以为初成，南下鹏城。艰苦奋斗，入华为。数年历练，日夜思索，博览天下之武功，颇有心得。"},{"title":"分类","date":"2016-12-15T10:00:50.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"categories.html","permalink":"https://baiyangliu.github.io/categories.html","excerpt":"","text":""},{"title":"标签","date":"2016-12-15T10:02:16.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"tags.html","permalink":"https://baiyangliu.github.io/tags.html","excerpt":"","text":""},{"title":"归档","date":"2016-12-15T10:02:16.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"archives/index.html","permalink":"https://baiyangliu.github.io/archives/index.html","excerpt":"","text":""}],"posts":[{"title":"深圳办事","slug":"深圳办事","date":"2017-11-23T15:28:25.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"深圳办事.html","link":"","permalink":"https://baiyangliu.github.io/深圳办事.html","excerpt":"","text":"深圳市少儿医保更改绑定医疗单位 社保查询","categories":[{"name":"生活","slug":"生活","permalink":"https://baiyangliu.github.io/categories/生活/"}],"tags":[]},{"title":"Nginx服务","slug":"Nginx服务","date":"2017-05-13T02:33:06.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Nginx服务.html","link":"","permalink":"https://baiyangliu.github.io/Nginx服务.html","excerpt":"仅供自己参考。","text":"仅供自己参考。/etc/rc.d/init.d/nginx123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169#!/bin/sh## nginx Startup script for nginx## chkconfig: - 85 15# processname: nginx# config: /etc/nginx/nginx.conf# config: /etc/sysconfig/nginx# pidfile: /var/run/nginx.pid# description: nginx is an HTTP and reverse proxy server#### BEGIN INIT INFO# Provides: nginx# Required-Start: $local_fs $remote_fs $network# Required-Stop: $local_fs $remote_fs $network# Default-Start: 2 3 4 5# Default-Stop: 0 1 6# Short-Description: start and stop nginx### END INIT INFO# Source function library.. /etc/rc.d/init.d/functionsif [ -L $0 ]; then initscript=`/bin/readlink -f $0`else initscript=$0fisysconfig=`/bin/basename $initscript`if [ -f /etc/sysconfig/$sysconfig ]; then . /etc/sysconfig/$sysconfigfinginx=$&#123;NGINX-/usr/sbin/nginx&#125;prog=`/bin/basename $nginx`conffile=$&#123;CONFFILE-/etc/nginx/nginx.conf&#125;lockfile=$&#123;LOCKFILE-/var/lock/subsys/nginx&#125;pidfile=$&#123;PIDFILE-/var/run/nginx.pid&#125;SLEEPMSEC=$&#123;SLEEPMSEC-200000&#125;UPGRADEWAITLOOPS=$&#123;UPGRADEWAITLOOPS-5&#125;CHECKSLEEP=$&#123;CHECKSLEEP-3&#125;RETVAL=0start() &#123; echo -n $\"Starting $prog: \" daemon --pidfile=$&#123;pidfile&#125; $&#123;nginx&#125; -c $&#123;conffile&#125; RETVAL=$? echo [ $RETVAL = 0 ] &amp;&amp; touch $&#123;lockfile&#125; return $RETVAL&#125;stop() &#123; echo -n $\"Stopping $prog: \" killproc -p $&#123;pidfile&#125; $&#123;prog&#125; RETVAL=$? echo [ $RETVAL = 0 ] &amp;&amp; rm -f $&#123;lockfile&#125; $&#123;pidfile&#125;&#125;reload() &#123; echo -n $\"Reloading $prog: \" killproc -p $&#123;pidfile&#125; $&#123;prog&#125; -HUP RETVAL=$? echo&#125;upgrade() &#123; oldbinpidfile=$&#123;pidfile&#125;.oldbin configtest -q || return echo -n $\"Starting new master $prog: \" killproc -p $&#123;pidfile&#125; $&#123;prog&#125; -USR2 echo for i in `/usr/bin/seq $UPGRADEWAITLOOPS`; do /bin/usleep $SLEEPMSEC if [ -f $&#123;oldbinpidfile&#125; -a -f $&#123;pidfile&#125; ]; then echo -n $\"Graceful shutdown of old $prog: \" killproc -p $&#123;oldbinpidfile&#125; $&#123;prog&#125; -QUIT RETVAL=$? echo return fi done echo $\"Upgrade failed!\" RETVAL=1&#125;configtest() &#123; if [ \"$#\" -ne 0 ] ; then case \"$1\" in -q) FLAG=$1 ;; *) ;; esac shift fi $&#123;nginx&#125; -t -c $&#123;conffile&#125; $FLAG RETVAL=$? return $RETVAL&#125;rh_status() &#123; status -p $&#123;pidfile&#125; -b $&#123;nginx&#125; $&#123;nginx&#125;&#125;check_reload() &#123; templog=`/bin/mktemp --tmpdir nginx-check-reload-XXXXXX.log` trap '/bin/rm -f $templog' 0 /usr/bin/tail --pid=$$ -n 0 --follow=name /var/log/nginx/error.log &gt; $templog &amp; /bin/sleep 1 /bin/echo -n $\"Sending reload signal to $prog: \" killproc -p $&#123;pidfile&#125; $&#123;prog&#125; -HUP /bin/echo /bin/sleep $CHECKSLEEP /bin/grep -E \"\\[emerg\\]|\\[alert\\]\" $templog&#125;# See how we were called.case \"$1\" in start) rh_status &gt;/dev/null 2&gt;&amp;1 &amp;&amp; exit 0 start ;; stop) stop ;; status) rh_status RETVAL=$? ;; restart) configtest -q || exit $RETVAL stop start ;; upgrade) rh_status &gt;/dev/null 2&gt;&amp;1 || exit 0 upgrade ;; condrestart|try-restart) if rh_status &gt;/dev/null 2&gt;&amp;1; then stop start fi ;; force-reload|reload) reload ;; configtest) configtest ;; check-reload) check_reload RETVAL=0 ;; *) echo $\"Usage: $prog &#123;start|stop|restart|condrestart|try-restart|force-reload|upgrade|reload|status|help|configtest|check-reload&#125;\" RETVAL=2esacexit $RETVAL 设置服务自启动1chkconfig nginx on 启动服务1service nginx start /usr/lib/systemd/system/nginx.service1234567891011121314151617[Unit][Unit]Description=nginx - high performance web serverDocumentation=http://nginx.org/en/docs/After=network-online.target remote-fs.target nss-lookup.targetWants=network-online.target [Service]Type=forkingPIDFile=/run/nginx.pidExecStartPre=/usr/sbin/nginx -t -c /etc/nginx/nginx.confExecStart=/usr/sbin/nginx -c /etc/nginx/nginx.confExecReload=/bin/kill -s HUP $MAINPIDExecStop=/bin/kill -s QUIT $MAINPID [Install]WantedBy=multi-user.target 设置服务自启动1systemctl enable nginx.service 启动服务1systemctl start nginx.service","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://baiyangliu.github.io/tags/Nginx/"}]},{"title":"Nginx编译参数","slug":"Nginx编译参数","date":"2017-05-13T02:13:01.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Nginx编译参数.html","link":"","permalink":"https://baiyangliu.github.io/Nginx编译参数.html","excerpt":"仅供自己参考。","text":"仅供自己参考。1234567891011121314151617181920212223242526272829303132333435363738--prefix=/etc/nginx \\--sbin-path=/usr/sbin/nginx \\--modules-path=/usr/lib64/nginx/modules \\--conf-path=/etc/nginx/nginx.conf \\--error-log-path=/var/log/nginx/error.log \\--http-log-path=/var/log/nginx/access.log \\--pid-path=/var/run/nginx.pid \\--lock-path=/var/run/nginx.lock \\--http-client-body-temp-path=/var/cache/nginx/client_temp \\--http-proxy-temp-path=/var/cache/nginx/proxy_temp \\--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\--http-scgi-temp-path=/var/cache/nginx/scgi_temp \\--user=nginx \\--group=nginx \\--with-http_ssl_module \\--with-http_realip_module \\--with-http_addition_module \\--with-http_sub_module \\--with-http_dav_module \\--with-http_flv_module \\--with-http_mp4_module \\--with-http_gunzip_module \\--with-http_gzip_static_module \\--with-http_random_index_module \\--with-http_secure_link_module \\--with-http_stub_status_module \\--with-http_auth_request_module \\--with-http_xslt_module=dynamic \\--with-http_image_filter_module=dynamic \\--with-http_geoip_module=dynamic \\--with-threads --with-stream \\--with-stream_ssl_module \\--with-http_slice_module \\--with-file-aio \\--with-http_v2_module \\--with-ipv6 \\--with-openssl=../openssl-1.0.2h","categories":[],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://baiyangliu.github.io/tags/Nginx/"}]},{"title":"Win10关闭ULPS","slug":"Win10关闭ULPS","date":"2017-04-07T13:32:36.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Win10关闭ULPS.html","link":"","permalink":"https://baiyangliu.github.io/Win10关闭ULPS.html","excerpt":"","text":"12345Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\&#123;4D36E968-E325-11CE-BFC1-08002BE10318&#125;\\0000]&quot;EnableULPS&quot;=dword:00000000[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\Class\\&#123;4D36E968-E325-11CE-BFC1-08002BE10318&#125;\\0001]&quot;EnableULPS&quot;=dword:00000000","categories":[{"name":"工具","slug":"工具","permalink":"https://baiyangliu.github.io/categories/工具/"}],"tags":[]},{"title":"Java高性能之CacheLine","slug":"Java高性能之CacheLine","date":"2017-03-28T06:27:19.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Java高性能之CacheLine.html","link":"","permalink":"https://baiyangliu.github.io/Java高性能之CacheLine.html","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class TestL1CacheMiss &#123; private static final int RUNS = 10; private static final int DIMENSION_1 = 1024 * 1024 * 8; private static final int DIMENSION_2 = 6; private static long[][] longs; @Before public void init() &#123; longs = new long[DIMENSION_1][]; for (int i = 0; i &lt; DIMENSION_1; i++) &#123; longs[i] = new long[DIMENSION_2]; for (int j = 0; j &lt; DIMENSION_2; j++) &#123; longs[i][j] = 0L; &#125; &#125; &#125; @Test public void slow() &#123; long sum = 0L; for (int r = 0; r &lt; RUNS; r++) &#123; final long start = System.nanoTime(); for (int j = 0; j &lt; DIMENSION_2; j++) &#123; for (int i = 0; i &lt; DIMENSION_1; i++) &#123; sum += longs[i][j]; &#125; &#125; System.out.println((System.nanoTime() - start)); &#125; &#125; @Test public void fast() &#123; long sum = 0L; for (int r = 0; r &lt; RUNS; r++) &#123; final long start = System.nanoTime(); for (int i = 0; i &lt; DIMENSION_1; i++) &#123; for (int j = 0; j &lt; DIMENSION_2; j++) &#123; sum += longs[i][j]; &#125; &#125; System.out.println((System.nanoTime() - start)); &#125; &#125;&#125;","categories":[{"name":"编码","slug":"编码","permalink":"https://baiyangliu.github.io/categories/编码/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://baiyangliu.github.io/tags/Java/"},{"name":"高性能","slug":"高性能","permalink":"https://baiyangliu.github.io/tags/高性能/"}]},{"title":"GitHub挂了是个什么样子？","slug":"GitHub挂了是个什么样子？","date":"2017-01-13T16:28:47.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"GitHub挂了是个什么样子？.html","link":"","permalink":"https://baiyangliu.github.io/GitHub挂了是个什么样子？.html","excerpt":"答案：GitHub挂了是酱紫滴……","text":"答案：GitHub挂了是酱紫滴…… No server is currently available to service your request.Sorry about that. Please try refreshing and contact us if the problem persists.Contact Support &mdash;GitHub Status &mdash;@githubstatus就在刚才，2017年1月14日0点左右，挂了20分钟左右，咋回事？？？","categories":[{"name":"无聊","slug":"无聊","permalink":"https://baiyangliu.github.io/categories/无聊/"}],"tags":[]},{"title":"JSONLint","slug":"JSONLint","date":"2017-01-13T05:08:48.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"JSONLint.html","link":"","permalink":"https://baiyangliu.github.io/JSONLint.html","excerpt":"","text":"在线JSON格式校验，JSON格式化 https://jsonlint.baiyangliu.com/","categories":[{"name":"工具","slug":"工具","permalink":"https://baiyangliu.github.io/categories/工具/"}],"tags":[]},{"title":"随机密码生成器","slug":"随机密码生成器","date":"2017-01-13T02:25:23.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"随机密码生成器.html","link":"","permalink":"https://baiyangliu.github.io/随机密码生成器.html","excerpt":"","text":"特殊字符：密码位数：","categories":[{"name":"工具","slug":"工具","permalink":"https://baiyangliu.github.io/categories/工具/"}],"tags":[]},{"title":"码农解析.00.序","slug":"码农解析.00.序","date":"2017-01-12T06:54:47.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"码农解析.00.序.html","link":"","permalink":"https://baiyangliu.github.io/码农解析.00.序.html","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233/* _oo0oo_ o8888888o 88\" . \"88 (| -_- |) 0\\ = /0 ___/`---'\\___ .' \\\\| |// '. / \\\\||| : |||// \\ / _||||| -:- |||||- \\ | | \\\\\\ - /// | | | \\_| ''\\---/'' |_/ | \\ .-\\__ '-' ___/-. / ___'. .' /--.--\\ `. .'___ .\"\" '&lt; `.___\\_&lt;|&gt;_/___.' &gt;' \"\". | | : `- \\`.;`\\ _ /`;.`/ - ` : | | \\ \\ `_. \\_ __\\ /__ _/ .-` / / =====`-.____`.___ \\_____/___.-`___.-'===== `=---=' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 佛祖保佑 永无BUG */#include &lt;stdio.h&gt;int main() &#123; printf(\"hello world!\"); return 0;&#125;","categories":[{"name":"码农解析","slug":"码农解析","permalink":"https://baiyangliu.github.io/categories/码农解析/"}],"tags":[]},{"title":"Hexo+Github+Travis-ci搭建程序员自己的博客","slug":"Hexo+Github+Travis-ci搭建程序员自己的博客","date":"2017-01-11T00:31:13.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Hexo+Github+Travis-ci搭建程序员自己的博客.html","link":"","permalink":"https://baiyangliu.github.io/Hexo+Github+Travis-ci搭建程序员自己的博客.html","excerpt":"概述 Hexo，NodeJS驱动的轻量级静态博客系统。 Github(Pages)，这里用来托管博客源码和发布静态页面。 Travis-ci，持续集成，写博客要坚持，发布也要持续。","text":"概述 Hexo，NodeJS驱动的轻量级静态博客系统。 Github(Pages)，这里用来托管博客源码和发布静态页面。 Travis-ci，持续集成，写博客要坚持，发布也要持续。 工作原理说明： 本地写好博客，推送到Github raw分支； Travis-ci收到通知，触发其拉取raw并生成静态文件，然后将静态文件推送到master分支； 博客得到更新。 步骤安装Hexo网上大把的教程。 申请或登录Github帐号国内的也可以申请Coding、OSChina等，原理以及所有操作都一样。 新建Repository注意名字，例如：本人的Github帐号是baiyangliu，那么你新建的这个Repository名字必须是baiyangliu.github.io，原因不作多说。 新建raw分支将Hexo源码文件放到raw分支，push到Github。 配置Access Token打开配置页，Token描述随便写（Hexo deployment），勾选和public_repo和user:email，点击Generate token，记下此token，该token只会在新建成功的时候显示一次，忘了必须删掉重新生成！！！ 配置SSH公钥若果不想使用Coding和OSChina可以忽略这一步，Github本身也可以这么做，但是这里采用Access Token方案。123456#注意替换成你自己的邮箱，全程直接回车。ssh-keygen -t rsa -C \"xxxxx@xxxxx.com\"#将公钥添加到https://git.oschina.net/profile/sshkeys和https://coding.net/user/account/setting/keyscat ~/.ssh/id_rsa.pub#将公钥保存下来，一会儿有用cat ~/.ssh/id_rsa 配置rsync参见这里 配置Travis-ci打开Travis-ci，选择使用Github帐号登录（Sign in with Github），如果没看到Github项目，同步一下就可以看到，配置环境变量： DEPLOY_TOKEN，填写上面在Github上生成的Access Token； SSH_KEY，即SSH私钥~/.ssh/id_rsa，但是有个问题，它是多行的，可以直接用记事本编辑它，通过转义字符\\n,将其合并成一行。 RSYNC_SECRET，rsync服务器密码。 新建.travis.yml文件需要注意的是，我这里将生成的静态文件同时推送到了Github、OSChina和Coding上，并且通过rsync同步到了我的个人VPS上，由于本人还申请了Heroku，Github的master分支更新会自动同步到Heroku上。因此，每次提交博客更新，其实同时发布到了多个地方（个人VPS、Github Pages、OSChina Pages、Coding Pages和Heroku），我也是服了自己忒能折腾了。。。1234567891011121314151617181920212223242526272829303132333435363738language: node_jsnode_js: nodebranches: only: - rawbefore_script: - npm install -g hexo - npm install -g hexo-cli - npm install -g gulpinstall: - npm installscript: - hexo clean - hexo g - gulpafter_success: - echo $RSYNC_SECRET &gt; rsync.secret - chmod 600 rsync.secret - rsync -vzrtopg --delete --progress --password-file=./rsync.secret ./public/* baiyangliu@baiyangliu.com::blog - rm -rf rsync.secret - cd ./public - git init - git config --global user.name \"baiyangliu\" - git config --global user.email \"cun.liu@qq.com\" - git add . - git commit -m \"Updated by travis-ci at $(date)\" - git push --force https://$DEPLOY_TOKEN@github.com/baiyangliu/baiyangliu.github.io.git master:master - echo -e \"$SSH_KEY\" &gt; id_rsa - chmod 600 id_rsa - eval $(ssh-agent -s) - ssh-add id_rsa - rm -rf id_rsa - ssh -o \"StrictHostKeyChecking no\" git@git.oschina.net - ssh -o \"StrictHostKeyChecking no\" git@git.coding.net - git push --force git@git.coding.net:baiyangliu/baiyangliu.git master:master - git push --force git@git.oschina.net:baiyangliu/baiyangliu.git master:master 提交将写好的博客推送到Github raw分支，成功后，Travis-ci会自动执行编译命令，稍等片刻，博客更新成功。","categories":[{"name":"工具","slug":"工具","permalink":"https://baiyangliu.github.io/categories/工具/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://baiyangliu.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://baiyangliu.github.io/tags/Github/"},{"name":"Travis-ci","slug":"Travis-ci","permalink":"https://baiyangliu.github.io/tags/Travis-ci/"}]},{"title":"使用rsync进行增量代码部署","slug":"使用rsync进行增量代码部署","date":"2016-12-28T09:21:39.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"使用rsync进行增量代码部署.html","link":"","permalink":"https://baiyangliu.github.io/使用rsync进行增量代码部署.html","excerpt":"问题来源做过Java开发的都知道，Java有着丰富的类库，你所想要的功能，几乎都有开源实现。但问题是，依赖库的递归依赖，使得编译出的文件非常庞大。再者，每次重新部署，其实都只做了“相当少”的代码更新。如果是在公网环境，情况会更加糟糕。。。 rsync是类unix系统下的数据镜像备份工具——remote sync。一款快速增量备份工具 Remote Sync，远程同步 支持本地复制，或者与其他SSH、rsync主机同步。","text":"问题来源做过Java开发的都知道，Java有着丰富的类库，你所想要的功能，几乎都有开源实现。但问题是，依赖库的递归依赖，使得编译出的文件非常庞大。再者，每次重新部署，其实都只做了“相当少”的代码更新。如果是在公网环境，情况会更加糟糕。。。 rsync是类unix系统下的数据镜像备份工具——remote sync。一款快速增量备份工具 Remote Sync，远程同步 支持本地复制，或者与其他SSH、rsync主机同步。 解决方案如上所述，既然每次都做了大量的无用功，能不能避免呢？当然可以，rsync就可以做到。本文以Spring Boot程序为例，对于静态文件、PHP、NodeJS等都适用。服务端使用CentOS7.2，客户端Windows10。 步骤服务端安装12yum install rsync -ysystemctl enable rsyncd.service 修改配置文件vim /etc/rsyncd.conf123456789101112131415161718#认证用户名和密码文件的名称和位置secrets file = /etc/rsyncd.secrets#欢迎文件，可自己编辑motd file = /etc/rsyncd.motdread&gt;list = yesuid = rootgid = rootuse chroot = nomax connections = 5log file = /var/log/rsyncd.logpid file = /var/run/rsyncd.pidlock file = /var/run/rsync.lock[app]comment = apppath = /opt/deployauth users = user1read only = no 生成密码文件12echo \"user1:123456\" &gt;&gt; /etc/rsyncd.secretschmod 600 /etc/rsyncd.secrets 添加防火墙例外12firewall-cmd --zone=dmz --add-port=873/tcp --permanentfirewall-cmd --reload 启动服务1systemctl start rsyncd 编译脚本（build.bat）1234567891011121314151617181920212223242526272829@echo offset \"CURRENT_DIR=%cd%\"svn co https://xxx %TMP%\\xxxsvn update \"%TMP%\\xxx\"cd /D \"%TMP%\\xxx\"call gradle clean bootRepackagecall unzip -o xxx/build/libs/*.jar -d xxx/build/libs/xxxcd xxx/build/libs/xxxset \"src=/cygdrive/%CD::=/%\"set \"src=%src:\\=/%\"cd /D %CURRENT_DIR%rem rsync下载地址(http://www.brentnorris.net/rsync.zip)call rsync -vzrtopg --delete --progress --password-file=./rsyncd.secrets %src% user1@你的服务器地址::apprem plink下载地址(https://the.earth.li/~sgtatham/putty/latest/x86/plink.exe)call plink -ssh root@你的服务器地址 systemctl daemon-reloadcall plink -ssh root@你的服务器地址 systemctl enable \"xxx.service\"call plink -ssh root@你的服务器地址 systemctl restart \"xxx.service\"cd /D %CURRENT_DIR% 注意：客户端rsyncd.secrets文件内容为123456。","categories":[{"name":"工具","slug":"工具","permalink":"https://baiyangliu.github.io/categories/工具/"}],"tags":[{"name":"rsync","slug":"rsync","permalink":"https://baiyangliu.github.io/tags/rsync/"}]},{"title":"Nginx配置优化之启用keep-alive","slug":"Nginx配置优化之启用keep-alive","date":"2016-12-26T06:56:16.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Nginx配置优化之启用keep-alive.html","link":"","permalink":"https://baiyangliu.github.io/Nginx配置优化之启用keep-alive.html","excerpt":"","text":"默认配置时12345678GET / HTTP/1.1Host: baiyangliu.comX-Real-IP: 192.168.1.1X-Forwarded-For: 192.168.1.1X-Forwarded-Proto: httpsX-Forwarded-Port: 443Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Connection: close 修改配置1234567891011proxy_http_version 1.1;upstream backends &#123; server 192.168.1.129; keepalive 128;&#125;locatioin / &#123; proxy_set_header Connection \"keep-alive\"; proxy_pass http://backends;&#125; 再次请求12345678GET / HTTP/1.1Host: baiyangliu.comX-Real-IP: 192.168.1.1X-Forwarded-For: 192.168.1.1X-Forwarded-Proto: httpsX-Forwarded-Port: 443Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Connection: keep-alive 可以发现HTTP/1.0变成HTTP/1.1，Connection: close变成Connection: keep-alive。","categories":[{"name":"Nginx配置","slug":"Nginx配置","permalink":"https://baiyangliu.github.io/categories/Nginx配置/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://baiyangliu.github.io/tags/Nginx/"}]},{"title":"Nginx配置优化之启用HTTP1.1","slug":"Nginx配置优化之启用HTTP1.1","date":"2016-12-26T06:15:32.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Nginx配置优化之启用HTTP1.1.html","link":"","permalink":"https://baiyangliu.github.io/Nginx配置优化之启用HTTP1.1.html","excerpt":"","text":"默认配置时123GET / HTTP/1.0Host: baiyangliu.comAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 修改配置1proxy_http_version 1.1; 再次请求123GET / HTTP/1.1Host: baiyangliu.comAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 可以发现HTTP/1.0变成HTTP/1.1。","categories":[{"name":"Nginx配置","slug":"Nginx配置","permalink":"https://baiyangliu.github.io/categories/Nginx配置/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://baiyangliu.github.io/tags/Nginx/"}]},{"title":"You can't specify target table 'department_user' for update in FROM clause","slug":"You can't specify target table xxx for update in FROM clause","date":"2016-12-22T09:51:00.000Z","updated":"2017-01-05T09:54:08.000Z","comments":true,"path":"You can't specify target table xxx for update in FROM clause.html","link":"","permalink":"https://baiyangliu.github.io/You can't specify target table xxx for update in FROM clause.html","excerpt":"","text":"出现原因MySQL中对同一张表Select的结果进行更新（删除）操作。 应用场景删除部门，要求将部门用户移动到父部门。 问题分析由于用户可能同时存在于本部门和父部门，因此在进行更新之前，需要将此类用户查出来直接删掉，然后更新部门ID。 出错SQL123456789101112131415161718192021DELETEFROM department_userWHERE department_id = ?AND user_id IN ( SELECT user_id FROM department_user WHERE department_id = ? AND user_id IN ( SELECT user_id FROM department_user WHERE department_id = ? )) 解决办法将Select的中间结果再次Select。。。 正确SQL1234567891011121314151617181920212223242526DELETEFROM department_userWHERE department_id = ?AND user_id IN ( SELECT t.user_id FROM ( SELECT user_id FROM department_user WHERE department_id = ? AND user_id IN ( SELECT user_id FROM department_user WHERE department_id = ? ) ) t)","categories":[{"name":"编码","slug":"编码","permalink":"https://baiyangliu.github.io/categories/编码/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://baiyangliu.github.io/tags/MySQL/"}]},{"title":"JSON压缩方案","slug":"JSON压缩方案","date":"2015-12-15T07:38:41.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"JSON压缩方案.html","link":"","permalink":"https://baiyangliu.github.io/JSON压缩方案.html","excerpt":"","text":"关于JSON，大家耳熟能详，不做多说，今天在这里分享一下关于JSON压缩的几点方案。 1.压缩Key原始JSON（长度：79）1234567&#123; \"username\": \"张三\", \"gender\": \"M\", \"age\": 38, \"email\": \"a@b.com\", \"phone\": \"15818376578\"&#125; 压缩Key以后（长度：57）1234567&#123; \"a\": \"张三\", \"b\": \"M\", \"c\": 38, \"d\": \"a@b.com\", \"e\": \"15818376578\"&#125; 体积减小27.85%，对于高并发的服务而言，此数字相当可观！！！那么，是不是所有的Restful都可以采用这种方案来进行压缩呢？答案是否定的。首先，Key压缩损失了JSON的可读性，这就要求必须事先进行约定，增加了出错的风险；其次，对于JSON中含有较长Value字段的，压缩效果不是很明显，可能得不偿失。附：如果采用Jackson，那么对username的压缩实现为@JsonProperty(“a”) 2.省略Key如果说方案1不解渴，那就来个更彻底的，直接省略掉Key！！！ 原始JSON（长度：79）1234567&#123; \"username\": \"张三\", \"gender\": \"M\", \"age\": 38, \"email\": \"a@b.com\", \"phone\": \"15818376578\"&#125; 省略Key以后（长度：37）1234567[ \"张三\", \"M\", 38, \"a@b.com\", \"15818376578\"] 体积减小53.16%，Oh,mygod!!!当然缺点就是将对象转换成了数组，这就要求字段顺序必须有保证（这个不难，排序一下就好），并且对于0或者null字段也不可省略。 3.字典压缩改进版的方案1，即：预先分析所有的字段，然后对字段名称进行编码（缩写），得到编码字典，之后的JSON生成和解析依赖于该字典，这样就可以进行高效的“压缩”和“解压”。此过程无需改动（侵入）现有代码，实现时，仅需对输入和输出进行过滤。 以上几种方案都是针对客户端为浏览器的情况下进行的改造，兼容性强，改动量都不是很大，却可以获得不错的性能提升。如果是服务与服务之间的通信，则完全可以替换掉JSON，比如Goole的Protobuf。","categories":[{"name":"性能","slug":"性能","permalink":"https://baiyangliu.github.io/categories/性能/"}],"tags":[{"name":"JSON","slug":"JSON","permalink":"https://baiyangliu.github.io/tags/JSON/"}]},{"title":"CentOS7一键安装配置Strongswan","slug":"CentOS7一键安装配置Strongswan","date":"2015-12-15T07:37:08.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"CentOS7一键安装配置Strongswan.html","link":"","permalink":"https://baiyangliu.github.io/CentOS7一键安装配置Strongswan.html","excerpt":"前面介绍了如入用自签名证书，请参见CentOS7 Strongswan IKEV2 架设梯子，这里介绍如何利用Let’s Encrypthe和acme.sh DNS API自动签发证书，实现一键安装，同时省去导入证书的麻烦。","text":"前面介绍了如入用自签名证书，请参见CentOS7 Strongswan IKEV2 架设梯子，这里介绍如何利用Let’s Encrypthe和acme.sh DNS API自动签发证书，实现一键安装，同时省去导入证书的麻烦。 准备工作1.新建API Key，域名服务商支持列表，如果你的域名服务商不在此列表中，请移步，或者迁移域名到acme.sh所支持的域名服务商；2.导入API Key，例如： 如果你的域名服务商是GoDaddy，则执行123export provider=gdexport GD_Key=\"sdfsdfsdfljlbjkljlkjsdfoiwje\"export GD_Secret=\"asdfsdafdsfdsfdsfdsfdsafd\" 如果你的域名服务商是阿里云，则执行123export provider=aliexport Ali_Key=\"sdfsdfsdfljlbjkljlkjsdfoiwje\"export Ali_Secret=\"jlsdflanljkljlfdsaklkjflsa\" Key和Secret从你第一步申请得到。 指定域名12#请换成你自己的域名export domain=domain.com 一键安装1234curl -s https://baiyangliu.github.io/one_key_install_strongswan_with_lets_encrypt_and_godaddy_on_centos7.sh &gt; achmod +x a./arm -rf a 密码文件：/etc/strongswan/ipsec.secrets","categories":[{"name":"科学上网","slug":"科学上网","permalink":"https://baiyangliu.github.io/categories/科学上网/"}],"tags":[{"name":"Strongswan","slug":"Strongswan","permalink":"https://baiyangliu.github.io/tags/Strongswan/"},{"name":"IKEV2","slug":"IKEV2","permalink":"https://baiyangliu.github.io/tags/IKEV2/"},{"name":"CentOS7","slug":"CentOS7","permalink":"https://baiyangliu.github.io/tags/CentOS7/"},{"name":"Let's Encrypt","slug":"Let-s-Encrypt","permalink":"https://baiyangliu.github.io/tags/Let-s-Encrypt/"}]},{"title":"Nginx HPKP Config","slug":"Nginx-HPKP-Config","date":"2015-12-15T07:36:28.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Nginx-HPKP-Config.html","link":"","permalink":"https://baiyangliu.github.io/Nginx-HPKP-Config.html","excerpt":"以本站为例，采用的是Let’s Encrypt免费证书Let&#39;s Encrypt Authority X3，序列号为‎0a 01 41 42 00 00 01 53 85 73 6a 0b 85 ec a7 08，以下是ca.cer","text":"以本站为例，采用的是Let’s Encrypt免费证书Let&#39;s Encrypt Authority X3，序列号为‎0a 01 41 42 00 00 01 53 85 73 6a 0b 85 ec a7 08，以下是ca.cer123456789101112131415161718192021222324252627-----BEGIN CERTIFICATE-----MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMTDkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0NlowSjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMTGkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EFq6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0Z8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWAa6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIGCCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNvbTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9kc3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAwVAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcCARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAzMDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwuY3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsFAAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJouM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwuX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlGPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6KOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==-----END CERTIFICATE----- 生成SPKI指纹12openssl x509 -noout -in ca.cer -pubkey | openssl asn1parse -noout -inform pem -out public.key;openssl dgst -sha256 -binary public.key | openssl enc -base64 得到结果 YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg= 本来Pin是需要备份的，哥懒得折腾了，直接铆一下AddTrust External CA Root lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU= 配置NGinx1add_header Public-Key-Pins &apos;pin-sha256=&quot;YLh1dUR9y6Kja30RrAn7JKnbQG/uEtLMkBgFF2Fuihg=&quot;; pin-sha256=&quot;lCppFqbkrlJ3EcVFAkeip0+44VaoJUymbnOaEUk7tEU=&quot; max-age=2592000; includeSubDomains&apos;; 重启，检测一下。 report-urissllabs","categories":[{"name":"Nginx配置","slug":"Nginx配置","permalink":"https://baiyangliu.github.io/categories/Nginx配置/"}],"tags":[{"name":"ssl","slug":"ssl","permalink":"https://baiyangliu.github.io/tags/ssl/"}]},{"title":"刘氏家族","slug":"刘氏家族","date":"2015-12-15T07:34:27.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"刘氏家族.html","link":"","permalink":"https://baiyangliu.github.io/刘氏家族.html","excerpt":"","text":"文刘金存先 汉朝宏正廷 学遵国法传 家宗义方兴德泽本延长 绒和道大光 敦行秉良善 积后自荣昌承宪须修治 饮崇亦裕世 隆培栽福基 进广安怀志纪钦喜成献 高明著述全 嘉猷常建恕 显达保辉联富有恒欲俊 端宣昭敏慎 履循贵用中 发祥永锡庆","categories":[],"tags":[]},{"title":"CentOS7 Strongswan IKEV2 架设梯子","slug":"CentOS7-Strongswan-IKEV2-架设梯子","date":"2015-12-15T07:34:00.000Z","updated":"2018-12-10T12:15:42.845Z","comments":true,"path":"CentOS7-Strongswan-IKEV2-架设梯子.html","link":"","permalink":"https://baiyangliu.github.io/CentOS7-Strongswan-IKEV2-架设梯子.html","excerpt":"","text":"参考：1.https://linsir.org/post/how_to_install_IPSec_IKEV2_base_on_strongswan_with_CentOS72.https://raymii.org/s/tutorials/IPSEC_vpn_with_CentOS_7.html strongswan.sh1234567891011121314151617181920212223242526272829303132333435#!/bin/sh#strongswan.shyum install strongswan -yyum install haveged -ysystemctl enable havegedsystemctl start havegedcd /etc/strongswanstrongswan pki --gen --type rsa --size 4096 --outform der &gt; ipsec.d/private/ca.key.derchmod 600 ipsec.d/private/ca.key.derstrongswan pki --self --ca --lifetime 7300 --in ipsec.d/private/ca.key.der --type rsa --dn \"C=CN, O=VPN, CN=StrongSwan Root CA\" --outform der &gt; ipsec.d/cacerts/ca.crt.derstrongswan pki --print --in ipsec.d/cacerts/ca.crt.derstrongswan pki --gen --type rsa --size 4096 --outform der &gt; ipsec.d/private/vpn.key.deropenssl x509 -inform DER -in ipsec.d/cacerts/ca.crt.der -out ipsec.d/cacerts/ca.crt.pem -outform PEMchmod 600 ipsec.d/private/vpn.key.derstrongswan pki --pub --in ipsec.d/private/vpn.key.der --type rsa | strongswan pki --issue --lifetime 7300 --cacert ipsec.d/cacerts/ca.crt.der --cakey ipsec.d/private/ca.key.der --dn \"C=CN, O=VPN, CN=vpn.0xa.in\" --san vpn.0xa.in --san 163.44.166.55 --san @163.44.166.55 --flag serverAuth --flag ikeIntermediate --outform der &gt; ipsec.d/certs/vpn.crt.derstrongswan pki --print --in ipsec.d/certs/vpn.crt.deropenssl x509 -inform DER -in ipsec.d/certs/vpn.crt.der -noout -textstrongswan pki --gen --type rsa --size 4096 --outform der &gt; ipsec.d/private/baiyangliu.key.derchmod 600 ipsec.d/private/baiyangliu.key.derstrongswan pki --pub --in ipsec.d/private/baiyangliu.key.der --type rsa | strongswan pki --issue --lifetime 7300 --cacert ipsec.d/cacerts/ca.crt.der --cakey ipsec.d/private/ca.key.der --dn \"C=CN, O=VPN, CN=vpn.0xa.in\" --san \"lc@baiyangliu.com\" --outform der &gt; ipsec.d/certs/baiyangliu.crt.deropenssl rsa -inform DER -in ipsec.d/private/baiyangliu.key.der -out ipsec.d/private/baiyangliu.key.pem -outform PEMopenssl x509 -inform DER -in ipsec.d/certs/baiyangliu.crt.der -out ipsec.d/certs/baiyangliu.crt.pem -outform PEMopenssl pkcs12 -export -inkey ipsec.d/private/baiyangliu.key.pem -in ipsec.d/certs/baiyangliu.crt.pem -name \"Baiyangliu VPN Certificate\" -certfile ipsec.d/cacerts/ca.crt.pem -caname \"StrongSwan Root CA\" -out baiyangliu.vpn.p12 /etc/strongswan/ipsec.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#/etc/strongswan/ipsec.confconfig setup uniqueids=neverconn %default keyexchange=ike left=%any leftsubnet=0.0.0.0/0 right=%anyconn IKE-BASE ikelifetime=60m keylife=20m rekeymargin=3m keyingtries=1 leftcert=vpn.crt.der rightsourceip=10.0.18.0/24 conn ike2-eap also=IKE-BASE keyexchange=ikev2 ike=aes256-sha256-modp2048,3des-sha1-modp2048,aes256-sha1-modp2048,aes256-sha1-modp1024! esp=aes256-sha256,3des-sha1,aes256-sha1! leftsendcert=always leftid=vpn.0xa.in leftauth=pubkey leftfirewall=yes rightauth=eap-mschapv2 rightsendcert=never eap_identity=%any rekey=no dpdaction=clear fragmentation=yes auto=addconn IPSec-IKEv1-PSK also=IKE-BASE keyexchange=ikev1 fragmentation=yes leftauth=psk rightauth=psk rightauth2=xauth auto=addconn IPSec-xauth also=IKE-BASE leftauth=psk leftfirewall=yes right=%any rightauth=psk rightauth2=xauth auto=add /etc/strongswan/strongswan.conf1234567891011121314151617#/etc/strongswan/strongswan.confcharon &#123; load_modular = yes duplicheck.enable = no compress = yes plugins &#123; include strongswan.d/charon/*.conf &#125; dns1 = 8.8.8.8 dns2 = 8.8.4.4 nbns1 = 8.8.8.8 nbns2 = 8.8.4.4&#125;include strongswan.d/*.conf /etc/strongswan/ipsec.secrets12345678#/etc/strongswan/ipsec.secrets: RSA vpn.key.derusername1 : EAP \"password1\"username2 : EAP \"password2\"username3 : EAP \"password3\"hipster: XAUTH \"tbkiT571KxqpaKy/ap1H4kcWX0SZkogJ\" /etc/sysctl.conf123net.ipv4.ip_forward = 1net.ipv4.conf.all.accept_redirects = 0net.ipv4.conf.all.send_redirects = 0 配置防火墙1234567firewall-cmd --permanent --add-rich-rule='rule protocol value=\"esp\" accept'firewall-cmd --permanent --add-rich-rule='rule protocol value=\"ah\" accept'firewall-cmd --permanent --add-service=\"ipsec\"firewall-cmd --permanent --add-port=500/udpfirewall-cmd --permanent --add-port=4500/udpfirewall-cmd --permanent --add-masqueradefirewall-cmd --reload 启动123sysctl -psystemctl enable strongswanstrongswan restart","categories":[{"name":"科学上网","slug":"科学上网","permalink":"https://baiyangliu.github.io/categories/科学上网/"}],"tags":[{"name":"Strongswan","slug":"Strongswan","permalink":"https://baiyangliu.github.io/tags/Strongswan/"}]},{"title":"Windows添加开机启动","slug":"Windows添加开机启动","date":"2015-12-15T07:33:00.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Windows添加开机启动.html","link":"","permalink":"https://baiyangliu.github.io/Windows添加开机启动.html","excerpt":"","text":"1234567891011[HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run][HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce][HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices][HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce][HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit][HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run][HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce][HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices][HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce][HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows]","categories":[{"name":"工具","slug":"工具","permalink":"https://baiyangliu.github.io/categories/工具/"}],"tags":[{"name":"Windows","slug":"Windows","permalink":"https://baiyangliu.github.io/tags/Windows/"}]},{"title":"Nginx反向代理，tomcat request.getScheme() 总是返回http","slug":"Nginx反向代理，tomcat-request-getScheme-总是返回http","date":"2015-12-15T07:32:00.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"Nginx反向代理，tomcat-request-getScheme-总是返回http.html","link":"","permalink":"https://baiyangliu.github.io/Nginx反向代理，tomcat-request-getScheme-总是返回http.html","excerpt":"错误如下：12345request.getScheme() //总是 http，而不是实际的http或https request.isSecure() //总是false（因为总是http） request.getRemoteAddr() //总是 nginx 请求的 IP，而不是用户的IP request.getRequestURL() //总是 nginx 请求的URL 而不是用户实际请求的 URL response.sendRedirect( 相对url ) //总是重定向到 http 上 （因为认为当前是 http 请求）","text":"错误如下：12345request.getScheme() //总是 http，而不是实际的http或https request.isSecure() //总是false（因为总是http） request.getRemoteAddr() //总是 nginx 请求的 IP，而不是用户的IP request.getRequestURL() //总是 nginx 请求的URL 而不是用户实际请求的 URL response.sendRedirect( 相对url ) //总是重定向到 http 上 （因为认为当前是 http 请求） 解决办法：修改nginx配置：12345proxy_set_header Host $host;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_set_header X-Forwarded-Proto $scheme;proxy_pass http://backends; 修改tomcat（conf/server.xml），在Engine节点添加1234&lt;Valve className=\"org.apache.catalina.valves.RemoteIpValve\" remoteIpHeader=\"X-Forwarded-For\" protocolHeader=\"X-Forwarded-Proto\" protocolHeaderHttpsValue=\"https\"/&gt; 重启服务即可。","categories":[{"name":"Nginx配置","slug":"Nginx配置","permalink":"https://baiyangliu.github.io/categories/Nginx配置/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://baiyangliu.github.io/tags/Nginx/"},{"name":"Tomcat","slug":"Tomcat","permalink":"https://baiyangliu.github.io/tags/Tomcat/"}]},{"title":"让C# WebBrowser使用IE11","slug":"让C-Sharp-WebBrowser使用IE11","date":"2015-12-15T07:31:25.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"让C-Sharp-WebBrowser使用IE11.html","link":"","permalink":"https://baiyangliu.github.io/让C-Sharp-WebBrowser使用IE11.html","excerpt":"","text":"1234567Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\MAIN\\FeatureControl\\FEATURE_BROWSER_EMULATION]&quot;xxx.exe&quot;=dword:2af9[HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Internet Explorer\\MAIN\\FeatureControl\\FEATURE_BROWSER_EMULATION]&quot;xxx.exe&quot;=dword:2af9 将上述文件中的xxx.exe替换成你的程序名字，保存为.reg文件，运行即可。详情求参考：https://msdn.microsoft.com/en-us/library/ee330730(v=vs.85).aspx#browser_emulation","categories":[{"name":"工具","slug":"工具","permalink":"https://baiyangliu.github.io/categories/工具/"}],"tags":[{"name":"c#","slug":"c","permalink":"https://baiyangliu.github.io/tags/c/"}]},{"title":"博客搬家","slug":"hello","date":"2015-12-15T04:59:00.000Z","updated":"2018-12-10T12:15:42.849Z","comments":true,"path":"hello.html","link":"","permalink":"https://baiyangliu.github.io/hello.html","excerpt":"","text":"折腾过Wordpress，折腾过Discuzz，折腾过Ghost，折腾过国内的各个博客……折腾来折腾去，以前写的好些东西都被折腾没了。不想再折腾了，以后就Hexo了。","categories":[],"tags":[]}]}